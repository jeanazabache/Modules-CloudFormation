parameters:
  branch:
  awsCredentials:
  regionName:
  tasks:
  zipBuildPrefix:
  zipFolderDeployPrefix:
steps:
  - script: |
      BRANCH=`echo ${{ parameters.branch }} | cut -d "/" -f3`
      BUILDFILENAME="${BRANCH}_build${{ parameters.zipBuildPrefix }}"
      DEPLOYFOLDERNAME="${BRANCH}_deploy${{ parameters.zipFolderDeployPrefix }}"

      echo "##vso[task.setvariable variable=branch]$BRANCH"
      echo "##vso[task.setvariable variable=buildFileName]$BUILDFILENAME"
      echo "##vso[task.setvariable variable=deployFolderName]$DEPLOYFOLDERNAME"
    displayName: 'Prepare strategy'

  - task: DownloadBuildArtifacts@0
    displayName: 'Download "build" from Artifact'
    inputs:
      buildType: 'current'
      downloadType: 'single'
      artifactName: '$(branch)'
      itemPattern: '**/$(buildFileName).zip'
      downloadPath: .
      
  - script: | 
      unzip ./$(branch)/$(buildFileName).zip -d .
      rm -rf ./$(branch)
      ls
    displayName: 'Unzip build of artifact'

  - ${{ each task in parameters.tasks }}:
    - script: |
        BUCKET=`echo "${{ task.s3BucketDeploy }}" | awk '{ print tolower($0); }'`
        S3PATH="${{ task.s3Path }}"
        FUNCTION_NAME="${{ task.functionName }}"

        if [[ "${{ task.s3PathIsLowerCase }}" == "true" ]]; then 
          $S3PATH=`echo "$S3PATH" | awk '{ print tolower($0); }'`
        fi

        if [[ "${{ task.functionNameIsLowerCase }}" == "true" ]]; then 
          FUNCTION_NAME=`echo "${{ task.functionName }}" | awk '{ print tolower($0); }'`
        fi

        BID=builds/$S3PATH/$(Build.BuildNumber).zip
        echo "##vso[task.setvariable variable=s3Bucket]$BUCKET"
        echo "##vso[task.setvariable variable=s3ObjectKey]$BID"
        echo "##vso[task.setvariable variable=functionNameBuild]$FUNCTION_NAME"

      displayName: 'Start - "${{ task.task }}"'

    - task: DotNetCoreCLI@2
      displayName: '> Dotnet publish ${{task.buildConfiguration}}'
      inputs:
        command: 'publish'
        publishWebProjects: false
        projects: '${{task.publishProject}}'
        arguments: '-c ${{task.buildConfiguration}} -o $(Build.ArtifactStagingDirectory)'
        zipAfterPublish: true

    - script: |
        rm -rf ./publish
        mkdir ./publish && mkdir ./publish/$(deployFolderName)
        mv $(Build.ArtifactStagingDirectory)/*.zip ./publish/$(deployFolderName)

        DEPLOYFILENAME=`echo $(ls ./publish/$(deployFolderName))`
        echo "##vso[task.setvariable variable=deployFileName]$DEPLOYFILENAME"
      displayName: '> Move and rename build zip'

    - task: PublishBuildArtifacts@1
      displayName: '> Publish "zip" in Artifact'
      inputs: 
        pathToPublish: './publish'
        artifactName: '$(branch)'
        
    - task: AWSCLI@1
      displayName: '> Move files to S3'
      inputs:
        awsCredentials: ${{ parameters.awsCredentials }}
        regionName: ${{ parameters.regionName }}
        awsCommand: 's3'
        awsSubCommand: 'mv'
        awsArguments: '--quiet ./publish/$(deployFolderName)/$(deployFileName) s3://$(s3Bucket)/$(s3ObjectKey)'

    - task: LambdaDeployFunction@1
      displayName: 'End - "${{ task.task }}"'
      inputs:
        awsCredentials: ${{ parameters.awsCredentials }}
        regionName: '${{ parameters.regionName }}'
        description: '${{ task.functionDescription }}'
        deploymentMode: 'codeandconfiguration'
        functionName: $(functionNameBuild)
        functionHandler: '${{ task.functionHandler }}'
        runtime: '${{ task.functionRuntime }}'
        codeLocation: 's3object'
        s3Bucket: '$(s3Bucket)'
        s3ObjectKey: '$(s3ObjectKey)'
        roleARN: '${{ task.functionRoleARN }}'
        memorySize: '${{ task.functionMemorySize }}'
        timeout: '${{ task.functionTimeout }}'
        environment: '${{ task.functionEnvironments }}'
        subnets: ${{ task.functionSubnets }}
        securityGroups: ${{ task.functionSecurityGroups }}
        tags: ${{ task.tags }}



