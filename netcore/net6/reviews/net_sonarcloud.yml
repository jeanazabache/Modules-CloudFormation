  parameters:
    branch: ''
    buildProject: '*.csproj'
    testProject: '*.csproj'
    versionSdk: '6.x'
    testIsEnabled: false
    testAWSShellScriptIsEnabled: false
    testAWSShellScript: ''
    extraProperties:
    sonarCloud:
    organization:
    cliProjectKey:
    cliProjectName:
    firstUploadSonarCloud: false

  steps:

  - task: UseDotNet@2
    displayName: 'Use .Net Core SDK ${{parameters.versionSdk}}'
    inputs:
      packageType: sdk
      version: '${{parameters.versionSdk}}'
      installationPath: $(Agent.ToolsDirectory)/dotnet
      includePreviewVersions: true

  - bash: |
      BRANCH=`echo ${{ parameters.branch }} | cut -d "/" -f3`
      BUILDFILENAME="${BRANCH}_build${{ parameters.zipBuildPrefix }}"
      
      echo "##vso[task.setvariable variable=branch]$BRANCH"
      echo "##vso[task.setvariable variable=buildFileName]$BUILDFILENAME"
    displayName: 'Prepare strategy'

  - task: DownloadBuildArtifacts@0
    displayName: 'Download build from Artifact'
    inputs:
      buildType: 'current'
      downloadType: 'single'
      artifactName: '$(branch)'
      itemPattern: '**/$(buildFileName).zip'
      downloadPath: .

  - script: | 
      unzip $(branch)/$(buildFileName).zip -d .
      rm -rf $(branch)
    displayName: 'Unzip build of artifact'

  # Preparar y analizar sonarcloud
  - template: /sonarcloud/scanners/sonarcloud_msbuild.yml@Architecture
    parameters:
      extraProperties: '${{ parameters.extraProperties }}'
      sonarCloud: '${{ parameters.sonarCloud }}'
      organization: '${{ parameters.organization }}'
      cliProjectKey: '${{ parameters.cliProjectKey }}'
      cliProjectName: '${{ parameters.cliProjectName }}'
      sonarCloudBranch: '$(branch)'
      firstUploadSonarCloud: '${{ parameters.firstUploadSonarCloud }}'

  - task: DotNetCoreCLI@2
    displayName: 'Dotnet build'
    inputs:
      command: 'build'
      projects: '${{parameters.buildProject}}'

  - ${{ if eq(parameters['testIsEnabled'], 'true') }}:
    - task: DotNetCoreCLI@2
      displayName: 'Execute Unit tests'
      condition: and(succeeded(), eq('${{ parameters.testIsEnabled }}', 'true'))
      inputs:
        command: 'test'
        projects: '${{parameters.testProject}}'
        arguments: '--collect "Code Coverage"'

  - ${{ if eq(parameters['testAWSShellScriptIsEnabled'], 'true') }}:
    - ${{ parameters.testAWSShellScript }}

  # Enviar analizar y publicar sonarcloud
  - template: /sonarcloud/scanners/sonarcloud_analyze_publish.yml@Architecture

  # Evaluaci√≥n sonarcloud
  - template: /sonarcloud/apis/sonarcloud_status.yml@Architecture
    parameters:
      sonarCloudBranch: '$(branch)'
      sonarCloudToken: '${{ parameters.sonarCloudToken }}'
      cliProjectKey: '${{ parameters.cliProjectKey }}'