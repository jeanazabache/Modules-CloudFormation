parameters:
  branch: ''
  awsCredentials: ''
  zipBuildPrefix: ''
  zipDeployPrefix: ''
  enabledCreateECR: false
  commandCreateECR: ''
  dockerLoginECR: ''
  dockerBuildECR: ''
  dockerTagECR : ''
  dockerPushECR : ''
  commandUpdateECS: ''
  #Cloudformation
  enabledCloudformation: false
  fileCloudFormation: ''
  stackNameCF: ''
  regionName:
  templateParameters:
  roleArn:
  tags:
  isTypeScript: false
  updateECS: true
  createTaskDefinitionBash: false
  createTaskDefinitionBashScript: 
  folderBuild: 'dist'
  
steps:

  - script: |
      BRANCH=`echo ${{ parameters.branch }} | cut -d "/" -f3`
      BUILDFILENAME="${BRANCH}_build${{ parameters.zipBuildPrefix }}"
      DEPLOYFILENAME="${BRANCH}_deploy${{ parameters.zipDeployPrefix }}"
      FOLDERBUILD="${{ parameters.folderBuild }}"
      
      echo "##vso[task.setvariable variable=branch]$BRANCH"
      echo "##vso[task.setvariable variable=deployFileName]$DEPLOYFILENAME"
      echo "##vso[task.setvariable variable=buildFileName]$BUILDFILENAME"
      echo "##vso[task.setvariable variable=folderBuild]$FOLDERBUILD"
    displayName: 'Prepare strategy'

  - task: DownloadBuildArtifacts@0
    displayName: 'Download build from Artifact'
    inputs:
      buildType: 'current'
      downloadType: 'single'
      artifactName: '$(branch)'
      itemPattern: '**/$(buildFileName).zip'
      downloadPath: "."

  - script: unzip ./$(branch)/$(buildFileName).zip
    displayName: 'Unzip artifact'

  - script: |
      mv node_modules package.json README.md package-lock.json Dockerfile $(folderBuild)/ 
      cd $(folderBuild)/
      zip -rq ../$(deployFileName).zip .
    displayName: 'Zip code for deployment'
    condition: and(succeeded(), eq('${{ parameters.isTypeScript }}', 'true'))

  - script: |
      rm -r $(branch)
      zip -rq $(deployFileName).zip .
    displayName: 'Zip code for deployment'
    condition: and(succeeded(), eq('${{ parameters.isTypeScript }}', 'false'))

  - task: PublishBuildArtifacts@1
    displayName: 'Publish "zip" in Artifact'
    inputs: 
      pathToPublish: '$(deployFileName).zip'
      artifactName:  '$(branch)'

  - task: AWSShellScript@1
    condition: and(succeeded(), eq('${{ parameters.enabledCreateECR }}', 'true'))
    displayName: Create ECR
    inputs:
      awsCredentials: ${{ parameters.awsCredentials }}
      regionName: '${{ parameters.regionName }}'
      scriptType: 'inline'
      inlineScript: ${{ parameters.commandCreateECR }}

  - task: AWSShellScript@1
    displayName: Docker login ECR
    inputs:
      awsCredentials: ${{ parameters.awsCredentials }}
      regionName: '${{ parameters.regionName }}'
      scriptType: 'inline'
      inlineScript: ${{ parameters.dockerLoginECR }}

  - task: CmdLine@2
    displayName: Docker Build
    inputs:
      script: |
        echo ${{ parameters.folderBuild }}
        ls -la
        cd $(folderBuild)/
        ${{ parameters.dockerBuildECR }}

  - task: CmdLine@2
    displayName: Docker Tag
    inputs:
      script: ${{ parameters.dockerTagECR }}

  - task: CmdLine@2
    displayName: Docker Push
    inputs:
      script: ${{ parameters.dockerPushECR }}

  - ${{ if eq(parameters['enabledCloudformation'], 'true') }}:
    - task: CloudFormationCreateOrUpdateStack@1
      displayName: 'Create / Update Cloudformation'
      inputs:
        awsCredentials: ${{ parameters.awsCredentials }}
        regionName: '${{ parameters.regionName }}'
        stackName: '${{parameters.stackNameCF}}'
        templateSource: 'file'
        templateFile: '${{ parameters.fileCloudFormation }}'
        templateParametersSource: 'inline'
        logRequest: true
        logResponse: true
        captureStackOutputs: asJSON
        templateParameters: ${{ parameters.templateParameters }}
        roleARN: '${{ parameters.roleARN }}'
        tags: ${{ parameters.tags }}

  - ${{ if eq(parameters['createTaskDefinitionBash'], 'true') }}:
    - task: AWSShellScript@1
      displayName: Create task definition update ecs
      inputs:
        awsCredentials: ${{ parameters.awsCredentials }}
        regionName: '${{ parameters.regionName }}'
        scriptType: 'inline'
        inlineScript: ${{ parameters.createTaskDefinitionBashScript }}

  # - ${{ if eq(parameters['updateECS'], 'true') }}:
  - task: AWSShellScript@1
    condition: and(succeeded(), eq('${{ parameters.updateECS }}', 'true'))
    displayName: Update ECS
    inputs:
      awsCredentials: ${{ parameters.awsCredentials }}
      regionName: '${{ parameters.regionName }}'
      scriptType: 'inline'
      inlineScript:  ${{ parameters.commandUpdateECS }}
