parameters:
  versionSpec:
  branch:
  buildCommand: ""
  zipBuildPrefix: ""
  replaceEnvIsEnabled: false
  taskCustomIsEnabled: false
  isEnabledCache: true
  npmAuthenticate: false

  postReplaceEnv: false
  postReplaceEnvCommand: ""
  targetFiles: ""
  taskCustom: ""
  customEndpoint: "FrontComponents-A254-SILBIA_2.0"
  sourceFolder: ''
steps:
  - task: NodeTool@0
    displayName: "Install Node.js"
    inputs:
      versionSource: 'spec'
      versionSpec: ${{ parameters.versionSpec }}

  - script: |
      node --version
      BRANCH=`echo ${{ parameters.branch }} | cut -d "/" -f3`
      BUILDFILENAME="${BRANCH}_build${{ parameters.zipBuildPrefix }}"
      SOURCEFOLDER=`echo ${{ parameters.sourceFolder }}`

      PACKAGELOCK=$(System.DefaultWorkingDirectory)$SOURCEFOLDER/package-lock.json
      PACKAGE_LOCK_EXISTS=false
      if test -f "$PACKAGELOCK"; then
        PACKAGE_LOCK_EXISTS=true
      fi
      valorSecret= `echo ${{ parameters.customEndpoint }}`
      echo $valorSecret
      echo "##vso[task.setvariable variable=branch]$BRANCH"
      echo "##vso[task.setvariable variable=buildFileName]$BUILDFILENAME"
      echo "##vso[task.setvariable variable=packageLogExists]$PACKAGE_LOCK_EXISTS"
      echo "##vso[task.setvariable variable=sourceFolder]$SOURCEFOLDER"
    displayName: "Prepare strategy"

  - ${{ if eq(parameters['npmAuthenticate'], 'true') }}:
      - task: npmAuthenticate@0
        displayName: 'npm Authenticate'
        inputs:
          workingFile: '$(System.DefaultWorkingDirectory)/.npmrc'
          customEndpoint: '${{ parameters.customEndpoint }}'
          
  - task: replacetokens@3
    condition: and(succeeded(), eq('${{ parameters.replaceEnvIsEnabled }}', 'true'))
    displayName: "Replacement value of enviroment"
    inputs:
      targetFiles: "${{ parameters.targetFiles }}"
      encoding: "auto"
      writeBOM: true
      verbosity: "detailed"
      actionOnMissing: "warn"
      keepToken: false
      tokenPrefix: "###{"
      tokenSuffix: "}###"
      useLegacyPattern: false
      enableTelemetry: true

  - ${{ if eq(parameters['taskCustomIsEnabled'], 'true') }}:
      - ${{ parameters.taskCustom }}
  
  - ${{ if eq(parameters['replaceEnvIsEnabled'], 'true') }}:
      - task: replacetokens@3
        condition: and(succeeded(), eq('${{ parameters.replaceEnvIsEnabled }}', 'true'))
        displayName: "Replacement value of enviroment"
        inputs:
          targetFiles: "${{ parameters.targetFiles }}"
          encoding: "auto"
          writeBOM: true
          verbosity: "detailed"
          actionOnMissing: "warn"
          keepToken: false
          tokenPrefix: "###{"
          tokenSuffix: "}###"
          useLegacyPattern: false
          enableTelemetry: true

  - ${{ if eq(parameters['postReplaceEnv'], 'true') }}:
      - ${{ parameters.postReplaceEnvCommand }}

  - ${{ if eq(parameters['isEnabledCache'], 'true') }}:
      - task: Cache@2
        condition: and(succeeded(), eq(variables.packageLogExists, 'true'))
        inputs:
          key: 'npm | "$(Agent.OS)" | package-lock.json'
          restoreKeys: |
            npm | "$(Agent.OS)"
          path: $(System.DefaultWorkingDirectory)${{ parameters.sourceFolder }}/node_modules
        displayName: Cache node_modules

  - script: ${{ parameters.buildCommand }}
    displayName: "Project build"

  - script: zip -rq $(buildFileName).zip .
    displayName: 'Generate "zip" of the build'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish "zip" in Artifact'
    inputs:
      pathToPublish: "$(buildFileName).zip"
      artifactName: "$(branch)"
