parameters:
  branch: ''
  awsCredentials: ''
  zipBuildPrefix: ''
  zipDeployPrefix: ''
  enabledCreateECR: false
  commandCreateECR: ''
  dockerLoginECR: ''
  dockerBuildECR: ''
  dockerTagECR : ''
  dockerPushECR : ''
  commandUpdateECS: ''
  #Cloudformation
  enabledCloudformation: false
  fileCloudFormation: ''
  stackNameCF: ''
  regionName: 'us-east-1'
  templateParameters: ''
  roleArn: ''
  tags: ''
  updateECS: false
steps:
  - script: |
      BRANCH=`echo ${{ parameters.branch }} | cut -d "/" -f3`
      BUILDFILENAME="${BRANCH}_build${{ parameters.zipBuildPrefix }}"
      DEPLOYFILENAME="${BRANCH}_deploy${{ parameters.zipDeployPrefix }}"
      echo "##vso[task.setvariable variable=branch]$BRANCH"
      echo "##vso[task.setvariable variable=deployFileName]$DEPLOYFILENAME"
      echo "##vso[task.setvariable variable=buildFileName]$BUILDFILENAME"
    displayName: 'Prepare strategy'


  - task: DownloadBuildArtifacts@0
    displayName: 'Download build from Artifact'
    inputs:
      buildType: 'current'
      downloadType: 'single'
      artifactName: '$(branch)'
      itemPattern: '**/$(buildFileName).zip'
      downloadPath: "."

  - script: unzip ./$(branch)/$(buildFileName).zip
    displayName: 'Unzip artifact'

  - script: |
      rm -r $(branch)
      zip -rq $(deployFileName).zip .
    displayName: 'Zip code for deployment'
    # condition: and(succeeded())

  - task: PublishBuildArtifacts@1
    displayName: 'Publish "zip" in Artifact'
    inputs: 
      pathToPublish: '$(deployFileName).zip'
      artifactName:  '$(branch)'

  - task: AWSShellScript@1
    condition: and(succeeded(), eq('${{ parameters.enabledCreateECR }}', 'true'))
    displayName: Create ECR
    inputs:
      awsCredentials: ${{ parameters.awsCredentials }}
      regionName: '${{ parameters.regionName }}'
      scriptType: 'inline'
      inlineScript: ${{ parameters.commandCreateECR }}

  - task: AWSShellScript@1
    displayName: Docker login ECR
    inputs:
      awsCredentials: ${{ parameters.awsCredentials }}
      regionName: '${{ parameters.regionName }}'
      scriptType: 'inline'
      inlineScript: ${{ parameters.dockerLoginECR }}

  - task: CmdLine@2
    displayName: Docker Build
    inputs:
      script: |
        cd dist/
        ${{ parameters.dockerBuildECR }}

  - task: CmdLine@2
    displayName: Docker Tag
    inputs:
      script: ${{ parameters.dockerTagECR }}

  - task: CmdLine@2
    displayName: Docker Push
    inputs:
      script: ${{ parameters.dockerPushECR }}

  - task: AWSShellScript@1
    condition: and(succeeded(), eq('${{ parameters.updateECS }}', 'true'))
    displayName: Update ECS
    inputs:
      awsCredentials: ${{ parameters.awsCredentials }}
      regionName: '${{ parameters.regionName }}'
      scriptType: 'inline'
      inlineScript:  ${{ parameters.commandUpdateECS }}
